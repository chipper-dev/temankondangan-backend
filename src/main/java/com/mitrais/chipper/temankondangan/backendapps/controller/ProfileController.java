package com.mitrais.chipper.temankondangan.backendapps.controller;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.mitrais.chipper.temankondangan.backendapps.common.CommonResource;
import com.mitrais.chipper.temankondangan.backendapps.model.Profile;
import com.mitrais.chipper.temankondangan.backendapps.model.json.ProfileUpdateWrapper;
import com.mitrais.chipper.temankondangan.backendapps.service.ProfileService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@Api(value = "Profile Management System", description = "Operations regarding profile in TemenKondangan System")
@RestController
@Validated
@RequestMapping("/profile")
public class ProfileController extends CommonResource {

	@Autowired
	private ProfileService profileService;

	// Save the uploaded file to this folder
	private static String DEFAULT_IMAGE = "images/default-profile.png";

	@ApiOperation(value = "Get profile by user id", response = Profile.class)
	@GetMapping("/getByUserId/{userId}")
	@ApiParam(value = "user id generated by db system", required = true)
	public Profile getByUserId(@PathVariable Long userId) {

		return profileService.getProfile(userId);
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public ResponseEntity<?> updateProfile(@RequestBody ProfileUpdateWrapper wrapper, Locale locale,
			HttpServletRequest request) {
		boolean result = profileService.update(wrapper);
		if (result) {
			return ResponseEntity.ok(getResponseBody(HttpStatus.OK.value(), result, null));
		}
		return new ResponseEntity<>(
				getResponseBody(HttpStatus.UNPROCESSABLE_ENTITY, null, null, request.getRequestURI()),
				HttpStatus.UNPROCESSABLE_ENTITY);
	}

//	@PostMapping("/fileupload")
//	public Profile uploadFile(@RequestParam("file") MultipartFile file) {
//		Profile profile = profileService.getProfile(1L);
//		try {
//			return profileService.uploadImage(file, profile);
//		} catch (Exception e) {
//		}
//		return null;
//	}
}
